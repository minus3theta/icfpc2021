/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/config.ts":
/*!***********************!*\
  !*** ./src/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "grid_col": () => (/* binding */ grid_col),
/* harmony export */   "grid_row": () => (/* binding */ grid_row),
/* harmony export */   "convertCoord": () => (/* binding */ convertCoord),
/* harmony export */   "width": () => (/* binding */ width),
/* harmony export */   "height": () => (/* binding */ height),
/* harmony export */   "grid_color": () => (/* binding */ grid_color),
/* harmony export */   "figure_color": () => (/* binding */ figure_color),
/* harmony export */   "figure_alert_color": () => (/* binding */ figure_alert_color),
/* harmony export */   "hole_color": () => (/* binding */ hole_color)
/* harmony export */ });
const rate = 8;
const pad = 100;
const grid_col = 160;
const grid_row = 160;
function convertCoord(x, y) {
    return [x * rate + pad, y * rate + pad];
}
const width = grid_col * rate + pad * 2;
const height = grid_row * rate + pad * 2;
const grid_color = 'rgb(100,100,100,0.5)';
const figure_color = 'rgb(00,00,255)';
const figure_alert_color = 'rgb(255,00,00)';
const hole_color = 'rgb(0,0,0)';


/***/ }),

/***/ "./src/drawState.ts":
/*!**************************!*\
  !*** ./src/drawState.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "drawGrid": () => (/* binding */ drawGrid),
/* harmony export */   "drawFigure": () => (/* binding */ drawFigure),
/* harmony export */   "drawHole": () => (/* binding */ drawHole),
/* harmony export */   "updateState": () => (/* binding */ updateState)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./src/config.ts");
/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graph */ "./src/graph.ts");


function drawGrid(ctx) {
    ctx.strokeStyle = _config__WEBPACK_IMPORTED_MODULE_0__.grid_color;
    for (let i = 0; i <= _config__WEBPACK_IMPORTED_MODULE_0__.grid_row; i++) {
        ctx.beginPath();
        let [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(0, i);
        ctx.moveTo(x, y);
        [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(_config__WEBPACK_IMPORTED_MODULE_0__.grid_col, i);
        ctx.lineTo(x, y);
        ctx.stroke();
    }
    for (let i = 0; i <= _config__WEBPACK_IMPORTED_MODULE_0__.grid_col; i++) {
        ctx.beginPath();
        let [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(i, 0);
        ctx.moveTo(x, y);
        [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(i, _config__WEBPACK_IMPORTED_MODULE_0__.grid_row);
        ctx.lineTo(x, y);
        ctx.stroke();
    }
}
function drawFigure(figure, epsilon, ctx) {
    ctx.strokeStyle = _config__WEBPACK_IMPORTED_MODULE_0__.figure_color;
    ctx.fillStyle = _config__WEBPACK_IMPORTED_MODULE_0__.figure_color;
    figure.vertices.forEach(co => {
        ctx.beginPath();
        const [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(co[0], co[1]);
        ctx.arc(x, y, 3, 0, Math.PI * 2, false);
        ctx.fill();
    });
    figure.edges.forEach((e, i) => {
        const from = figure.vertices[e[0]];
        const to = figure.vertices[e[1]];
        const d = (0,_graph__WEBPACK_IMPORTED_MODULE_1__.dist)(from, to);
        if (Math.abs(d / figure.orig_len[i] - 1) > (epsilon / 1000000)) {
            ctx.strokeStyle = _config__WEBPACK_IMPORTED_MODULE_0__.figure_alert_color;
        }
        ctx.beginPath();
        let [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(from[0], from[1]);
        ctx.moveTo(x, y);
        [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(to[0], to[1]);
        ctx.lineTo(x, y);
        ctx.stroke();
        ctx.strokeStyle = _config__WEBPACK_IMPORTED_MODULE_0__.figure_color;
    });
}
function drawHole(hole, ctx) {
    ctx.strokeStyle = _config__WEBPACK_IMPORTED_MODULE_0__.hole_color;
    ctx.fillStyle = _config__WEBPACK_IMPORTED_MODULE_0__.hole_color;
    hole.forEach(co => {
        ctx.beginPath();
        const [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(co[0], co[1]);
        ctx.arc(x, y, 3, 0, Math.PI * 2, false);
        ctx.fill();
    });
    for (let i = 0; i < hole.length; i++) {
        const from = hole[i];
        const to = hole[(i + 1) % hole.length];
        ctx.beginPath();
        let [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(from[0], from[1]);
        ctx.moveTo(x, y);
        [x, y] = (0,_config__WEBPACK_IMPORTED_MODULE_0__.convertCoord)(to[0], to[1]);
        ctx.lineTo(x, y);
        ctx.stroke();
    }
}
function updateState(state, ctx) {
    ctx.clearRect(0, 0, _config__WEBPACK_IMPORTED_MODULE_0__.width, _config__WEBPACK_IMPORTED_MODULE_0__.height);
    drawGrid(ctx);
    drawHole(state.hole, ctx);
    drawFigure(state.figure, state.epsilon, ctx);
}


/***/ }),

/***/ "./src/graph.ts":
/*!**********************!*\
  !*** ./src/graph.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dist": () => (/* binding */ dist),
/* harmony export */   "figure2graph": () => (/* binding */ figure2graph),
/* harmony export */   "splitPwr": () => (/* binding */ splitPwr),
/* harmony export */   "bane": () => (/* binding */ bane),
/* harmony export */   "graph2vertices": () => (/* binding */ graph2vertices)
/* harmony export */ });
function dist(p, q) {
    const [x0, y0] = p;
    const [x1, y1] = q;
    return (x0 - x1) ** 2 + (y0 - y1) ** 2;
}
function figure2graph(figure) {
    var _a;
    const n_node = figure.vertices.length;
    const graph = {
        nodes: [],
        orig_len: (new Array(n_node))
    };
    for (let i = 0; i < n_node; i++) {
        graph.orig_len[i] = [];
        for (let j = 0; j < n_node; j++) {
            (_a = graph.orig_len[i]) === null || _a === void 0 ? void 0 : _a.push(0);
        }
    }
    figure.vertices.forEach(node => {
        graph.nodes.push({
            p: node,
            edges: []
        });
    });
    figure.edges.forEach(([p, q], i) => {
        var _a, _b;
        (_a = graph.nodes[p]) === null || _a === void 0 ? void 0 : _a.edges.push(q);
        (_b = graph.nodes[q]) === null || _b === void 0 ? void 0 : _b.edges.push(p);
        graph.orig_len[p][q] = figure.orig_len[i];
        graph.orig_len[q][p] = figure.orig_len[i];
    });
    return graph;
}
function splitPwr(n1, n2) {
    // n1 -> n2 vector
    const d = dist(n1, n2);
    return [(n2[0] - n1[0]) / d, (n2[1] - n1[1]) / d];
}
function bane(graph, epsilon, moved) {
    const min_e = 0;
    const k = 0.8;
    const dt = 1;
    const dc = 0.4;
    const n_node = graph.nodes.length;
    const sp = new Array(n_node);
    for (let i = 0; i < sp.length; i++) {
        sp[i] = [0, 0];
    }
    for (let i = 0; i < 10000; i++) {
        let total_e = 0;
        graph.nodes.forEach((n1, s) => {
            if (s == moved) {
                return;
            }
            const p = [0, 0];
            for (const t of n1.edges) {
                const n2 = graph.nodes[t];
                const orig_d = graph.orig_len[s][t];
                const new_d = dist(n1.p, n2.p);
                let pwr = 0;
                if (Math.abs(new_d / orig_d - 1) > (epsilon / 1000000)) {
                    pwr = k * (new_d - orig_d);
                }
                const [x, y] = splitPwr(n1.p, n2.p);
                p[0] += pwr * x;
                p[1] += pwr * y;
            }
            sp[s][0] += p[0] * dt;
            sp[s][0] *= dc;
            sp[s][1] += p[1] * dt;
            sp[s][1] *= dc;
        });
        sp.forEach((speed, node) => {
            let [x, y] = graph.nodes[node].p;
            x = Math.round(x + speed[0]);
            y = Math.round(y + speed[1]);
            graph.nodes[node].p = [x, y];
            total_e += dist(speed, [0, 0]);
        });
        if (total_e < min_e)
            break;
    }
}
function graph2vertices(graph) {
    const vertices = [];
    graph.nodes.forEach(node => {
        vertices.push(node.p);
    });
    return vertices;
}


/***/ }),

/***/ "./src/state.ts":
/*!**********************!*\
  !*** ./src/state.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setOrigLen": () => (/* binding */ setOrigLen)
/* harmony export */ });
/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graph */ "./src/graph.ts");

function setOrigLen(figure) {
    const orig_len = [];
    for (const e of figure.edges) {
        orig_len.push((0,_graph__WEBPACK_IMPORTED_MODULE_0__.dist)(figure.vertices[e[0]], figure.vertices[e[1]]));
    }
    figure.orig_len = orig_len;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./src/config.ts");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ "./src/state.ts");
/* harmony import */ var _drawState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drawState */ "./src/drawState.ts");
/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./graph */ "./src/graph.ts");




const canvas = document.getElementById('canvas');
canvas.width = _config__WEBPACK_IMPORTED_MODULE_0__.width;
canvas.height = _config__WEBPACK_IMPORTED_MODULE_0__.height;
const ctx = canvas.getContext('2d');
let state = {
    "hole": [
        [45, 80], [35, 95], [5, 95], [35, 50], [5, 5], [35, 5], [95, 95], [65, 95], [55, 80]
    ],
    "epsilon": 150000,
    "figure": {
        "edges": [
            [2, 5], [5, 4], [4, 1], [1, 0], [0, 8], [8, 3], [3, 7], [7, 11], [11, 13],
            [13, 12], [12, 18], [18, 19], [19, 14], [14, 15], [15, 17], [17, 16],
            [16, 10], [10, 6], [6, 2], [8, 12], [7, 9], [9, 3], [8, 9], [9, 12], [13, 9],
            [9, 11], [4, 8], [12, 14], [5, 10], [10, 15]
        ],
        "vertices": [
            [20, 30], [20, 40], [30, 95], [40, 15], [40, 35], [40, 65], [40, 95],
            [45, 5], [45, 25], [50, 15], [50, 70], [55, 5], [55, 25], [60, 15],
            [60, 35], [60, 65], [60, 95], [70, 95], [80, 30], [80, 40]
        ],
        "orig_len": []
    }
};
state = { "hole": [[0, 4], [11, 0], [21, 12], [27, 0], [41, 1], [56, 0], [104, 0], [104, 25], [93, 29], [97, 41], [104, 53], [82, 57], [67, 57], [58, 49], [40, 57], [25, 57], [12, 53], [0, 56]], "epsilon": 29340, "figure": { "orig_len": [], "edges": [[0, 1], [0, 3], [1, 2], [2, 4], [2, 5], [3, 5], [4, 6], [5, 7], [6, 7], [6, 8], [7, 9], [8, 10], [8, 11], [9, 10], [10, 11]], "vertices": [[26, 37], [22, 12], [2, 20], [4, 21], [5, 0], [24, 29], [25, 12], [2, 19], [5, 23], [20, 34], [0, 46], [20, 40]] } };
state = { "hole": [[80, 125], [70, 155], [5, 155], [5, 80], [45, 70], [5, 60], [5, 5], [75, 5], [85, 35], [95, 5], [155, 5], [155, 60], [120, 75], [155, 80], [155, 155], [90, 155]], "epsilon": 375000, "figure": { "orig_len": [], "edges": [[19, 28], [28, 26], [26, 17], [17, 16], [16, 19], [19, 21], [64, 57], [57, 52], [52, 53], [53, 67], [67, 70], [70, 57], [21, 64], [64, 77], [77, 76], [76, 63], [63, 44], [44, 40], [40, 25], [25, 13], [13, 14], [14, 15], [15, 21], [15, 12], [12, 11], [11, 14], [12, 7], [7, 5], [5, 10], [10, 8], [8, 3], [3, 1], [1, 11], [8, 11], [10, 12], [13, 6], [6, 9], [9, 2], [2, 0], [0, 4], [4, 6], [25, 24], [24, 29], [29, 23], [23, 18], [18, 24], [40, 39], [39, 43], [43, 44], [43, 46], [46, 35], [35, 34], [34, 39], [63, 65], [65, 73], [73, 71], [71, 58], [58, 65], [77, 81], [81, 89], [89, 91], [91, 93], [93, 92], [92, 89], [84, 85], [85, 88], [88, 87], [87, 84], [84, 81], [81, 78], [78, 82], [82, 81], [76, 83], [83, 90], [90, 95], [95, 94], [94, 86], [86, 80], [80, 75], [75, 79], [79, 83], [83, 86], [22, 72], [72, 74], [74, 20], [20, 22], [30, 36], [36, 37], [37, 31], [31, 30], [36, 41], [41, 42], [42, 37], [41, 49], [49, 50], [50, 42], [49, 54], [54, 55], [55, 50], [54, 61], [61, 62], [62, 55], [61, 68], [68, 69], [69, 62], [31, 20], [69, 74], [38, 33], [33, 27], [27, 32], [32, 38], [38, 45], [45, 47], [47, 51], [51, 48], [48, 45], [51, 56], [56, 60], [60, 66], [66, 59], [59, 56], [66, 72], [27, 22], [48, 49], [74, 77], [20, 14], [22, 25], [72, 63]], "vertices": [[1, 93], [6, 118], [8, 103], [8, 123], [9, 80], [9, 128], [13, 86], [13, 131], [17, 119], [19, 94], [20, 121], [22, 115], [25, 118], [33, 69], [37, 98], [42, 102], [46, 145], [48, 152], [54, 12], [54, 143], [56, 92], [58, 109], [60, 55], [61, 7], [61, 18], [61, 32], [64, 152], [65, 64], [67, 143], [68, 13], [69, 74], [69, 82], [71, 71], [72, 57], [74, 24], [75, 21], [75, 74], [75, 82], [77, 65], [78, 24], [78, 33], [81, 74], [81, 82], [82, 24], [82, 34], [82, 66], [85, 23], [85, 63], [85, 70], [87, 74], [87, 82], [88, 66], [89, 147], [91, 152], [93, 74], [93, 81], [94, 65], [95, 146], [98, 14], [98, 70], [99, 59], [99, 74], [99, 80], [101, 41], [102, 108], [103, 22], [103, 65], [104, 152], [105, 74], [105, 79], [105, 144], [106, 12], [111, 58], [112, 20], [114, 87], [125, 25], [125, 70], [125, 85], [129, 105], [130, 43], [133, 26], [133, 91], [133, 105], [138, 47], [138, 98], [138, 104], [140, 43], [144, 98], [144, 104], [145, 89], [148, 48], [148, 85], [149, 92], [152, 89], [154, 33], [159, 36]] } };
(0,_state__WEBPACK_IMPORTED_MODULE_1__.setOrigLen)(state.figure);
(0,_drawState__WEBPACK_IMPORTED_MODULE_2__.updateState)(state, ctx);
const state_text_area = document.getElementById("state");
const update_button = document.getElementById("update");
state_text_area.value = JSON.stringify(state, null, 4);
update_button.addEventListener('click', (_ev) => {
    const new_state = JSON.parse(state_text_area.value);
    let moved = -1;
    for (let i = 0; i < state.figure.vertices.length; i++) {
        const v = state.figure.vertices[i];
        const new_v = new_state.figure.vertices[i];
        if (v[0] !== new_v[0] || v[1] !== new_v[1]) {
            moved = i;
            break;
        }
    }
    state = new_state;
    console.log(moved);
    (0,_drawState__WEBPACK_IMPORTED_MODULE_2__.updateState)(state, ctx);
    setTimeout(() => {
        const graph = (0,_graph__WEBPACK_IMPORTED_MODULE_3__.figure2graph)(state.figure);
        (0,_graph__WEBPACK_IMPORTED_MODULE_3__.bane)(graph, state.epsilon, moved);
        const v = (0,_graph__WEBPACK_IMPORTED_MODULE_3__.graph2vertices)(graph);
        state.figure.vertices = v;
        (0,_drawState__WEBPACK_IMPORTED_MODULE_2__.updateState)(state, ctx);
        state_text_area.value = JSON.stringify(state, null, 4);
    }, 500);
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,